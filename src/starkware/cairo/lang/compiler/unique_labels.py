from contextlib import contextmanager
from contextvars import ContextVar
from dataclasses import field


# Dollar is not a valid identifier character in Cairo, thus we can be sure,
# nobody will try to create colliding identifiers in source code.
ANONYMOUS_LABEL_PREFIX = "$"

# It would be great if we could ensure resetting this on each run, but we happen to have many tests
# which are parsing or doing other affecting computations and are not using PassManager.
counter_ctx_var: ContextVar[int] = ContextVar("counter", default=0)


@contextmanager
def unique_labelling_context():
    token = counter_ctx_var.set(0)
    try:
        yield
    finally:
        counter_ctx_var.reset(token)


def new_unique_label() -> str:
    """
    Returns new compilation-unique label name which is guaranteed to be impossible to declare
    by source code.
    """
    counter = counter_ctx_var.get()
    counter_ctx_var.set(counter + 1)
    return f"{ANONYMOUS_LABEL_PREFIX}{counter}"


def is_anonymous_label(label_name: str) -> bool:
    """
    Returns True if the given label seems to have been generated by AnonymousLabelGenerator.
    """
    return label_name.startswith(ANONYMOUS_LABEL_PREFIX)


def unique_label_field(**kwargs):
    return field(default_factory=new_unique_label, **kwargs)
